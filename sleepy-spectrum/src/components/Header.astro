---
const menuItems = [
  { name: "Inicio", href: "#inicio" },
  { name: "Experiencia", href: "#experiencia" },
  { name: "Proyectos", href: "#proyectos" },
  { name: "Contacto", href: "#contacto" },
];
---

<header class="fixed w-full top-0 z-50 bg-white/50 dark:bg-gray-800/80 backdrop-blur-md transition-all">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <nav class="flex items-center justify-center h-16 relative">
      <!-- Botón de Dark Mode a la izquierda -->
      <div class="absolute left-4">
        <button id="dark-mode-toggle" class="relative inline-flex items-center h-5 w-9 bg-gray-300 dark:bg-gray-600 border border-gray-400 dark:border-gray-500 rounded-full transition-colors focus:outline-none">
          <!-- Ícono de día (sol) a la izquierda -->
          <span class="absolute left-1 flex items-center">
            <svg class="h-3 w-3 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zM10 15a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM4.22 4.22a1 1 0 011.42 0l.88.88a1 1 0 01-1.42 1.42l-.88-.88a1 1 0 010-1.42zM14.66 14.66a1 1 0 011.42 0l.88.88a1 1 0 11-1.42 1.42l-.88-.88a1 1 0 010-1.42zM2 10a1 1 0 011-1h1a1 1 0 010 2H3a1 1 0 01-1-1zM15 10a1 1 0 011-1h1a1 1 0 010 2h-1a1 1 0 01-1-1z" />
            </svg>
          </span>

          <!-- Ícono de noche (luna cuarto menguante) a la derecha, achicado -->
          <span class="absolute right-1 flex items-center">
            <svg class="h-2 w-2 text-gray-800 dark:text-gray-200" fill="currentColor" viewBox="0 0 20 20" style="transform: scaleX(-1);">
              <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" />
            </svg>
          </span>

          <!-- Knob del switch -->
          <span id="dark-mode-toggle-knob" class="inline-block w-3 h-3 bg-white rounded-full transform transition-transform"></span>
        </button>
      </div>

      <!-- Menú de navegación centrado -->
      <div class="hidden md:flex space-x-6">
        {menuItems.map((item) => (
          <a href={item.href} class="nav-link text-gray-900 dark:text-gray-200 hover:text-indigo-500 dark:hover:text-indigo-400 px-3 py-2 text-sm font-medium transition-colors">
            {item.name}
          </a>
        ))}
      </div>

      <!-- Botón de menú móvil a la derecha -->
      <div class="absolute right-4 md:hidden">
        <button id="mobile-menu-button" class="p-2 rounded-md text-gray-700 hover:text-indigo-500">
          <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </nav>
  </div>

  <!-- Menú móvil -->
  <div id="mobile-menu" class="hidden bg-white dark:bg-gray-700 md:hidden">
    <div class="px-2 pt-2 pb-3 space-y-1">
      {menuItems.map((item) => (
        <a href={item.href} class="nav-link block text-gray-900 dark:text-gray-200 hover:text-indigo-500 px-3 py-2 rounded-md text-base font-medium transition-colors">
          {item.name}
        </a>
      ))}
    </div>
  </div>

  <!-- Script de interacción (se carga en el cliente) -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const menuButton = document.getElementById("mobile-menu-button");
      const mobileMenu = document.getElementById("mobile-menu");
      const toggleButton = document.getElementById("dark-mode-toggle");
      const knob = document.getElementById("dark-mode-toggle-knob");
      const root = document.documentElement;
      const links = document.querySelectorAll(".nav-link");

      // Scroll suave y cierre del menú móvil al hacer clic en un enlace
      links.forEach(link => {
        link.addEventListener("click", e => {
          e.preventDefault();
          const targetId = link.getAttribute("href")?.substring(1);
          const targetElement = targetId ? document.getElementById(targetId) : null;
          if (targetElement) {
            window.scrollTo({
              top: targetElement.offsetTop - 50,
              behavior: "smooth"
            });
            if (mobileMenu && !mobileMenu.classList.contains("hidden")) {
              mobileMenu.classList.add("hidden");
            }
          }
        });
      });

      // Toggle del menú móvil
      if (menuButton && mobileMenu) {
        menuButton.addEventListener("click", () => {
          mobileMenu.classList.toggle("hidden");
        });
      }

      // Función para actualizar la posición del knob según el estado del tema
      function updateKnob() {
        if (!knob) return;
        if (root.classList.contains("dark")) {
          knob.classList.add("translate-x-5");
        } else {
          knob.classList.remove("translate-x-5");
        }
      }

      // Toggle de Dark Mode y almacenamiento de la preferencia
      if (toggleButton) {
        toggleButton.addEventListener("click", () => {
          root.classList.toggle("dark");
          localStorage.setItem("theme", root.classList.contains("dark") ? "dark" : "light");
          updateKnob();
        });
        const savedTheme = localStorage.getItem("theme");
        if (savedTheme) {
          root.classList.toggle("dark", savedTheme === "dark");
        } else if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          root.classList.add("dark");
        }
        updateKnob();
      }
    });
  </script>
</header>

<style>
  header {
    transition: background-color 0.3s ease, backdrop-filter 0.3s ease;
  }
  a {
    transition: color 0.3s ease;
  }
</style>
